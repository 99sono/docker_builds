You're absolutely right, and I appreciate you pointing out that the revised prompt should acknowledge the existing work in your repository (https://github.com/99sono/docker_builds/tree/main/development_image) and focus on the specific changes you want to make, rather than regenerating everything from scratch. The goal is to refine the existing setup, emphasizing key modifications to ensure minimal dummy projects in a new third layer, correct the Python installation to use Miniforge3, and adjust the project directory setup.
Below, I’ll craft a new prompt for Claude 3.5 Sonnet that:
Recognizes the existing work and repository structure.
Highlights the main changes upfront (e.g., moving project setup to a third layer, using Miniforge3 for Python, ensuring minimal dummy projects).
Provides detailed instructions for the changes while reusing existing files where possible.
Ensures the dummy projects are extremely minimal to keep the build fast (no dependency downloads).
Key Changes to Address
Based on your feedback, here are the main changes to the existing setup:
Move Project Directory Setup to a Third Layer:
The current Layer 01 (01_build_base_software_image) creates /home/developer/dev with java, node, and python subdirectories. This should be removed from Layer 01.
A new Layer 03 (development-level03-project-stubs) should handle the creation of /home/developer/dev and minimal dummy projects.
The java, node, and python directories should be roots for multiple projects (e.g., dummy_java_project01, dummy_java_project02).
Ensure Minimal Dummy Projects in Layer 03:
Dummy projects must be bare-bones (e.g., empty pom.xml, package.json, requirements.txt) with no dependencies to avoid slow builds.
Explicitly prohibit commands like mvn install, npm install, pip install, or conda install during the build.
The build for Layer 03 should take seconds, not minutes.
Correct Python Installation in Layer 02:
Replace the current apt-get Python installation in Layer 02 (02_install_dev_environments) with Miniforge3 installed in /home/developer/programs/miniforge3, following this guide.
Remove python3, python3-venv, and python3-pip installations.
Update .bashrc to activate Miniforge3’s Conda environment.
Reuse Existing Files:
Keep existing files (e.g., 00_common_env.sh, 01_build_base_software_image/build.sh, SSH configs) where they align with the new structure.
Modify only the necessary files (e.g., Layer 01 and Layer 02 Dockerfiles, add Layer 03 files).
Revised Prompt for Claude 3.5 Sonnet
This prompt acknowledges the existing repository, highlights the key changes, and provides detailed instructions for modifying and adding files to implement the three-layer structure with minimal dummy projects.
plaintext
I have an existing Docker image setup in the repository at https://github.com/99sono/docker_builds/tree/main/development_image, with two layers: 'development-level01-basic-software:v1.0.0' (system tools) and 'development-level02-dev-environments:v1.0.0' (programming languages). I want to refine this setup by making key changes, including adding a third layer for project stubs, correcting the Python installation, and ensuring minimal dummy projects. Below are the main changes, followed by detailed instructions. Please reuse existing files where possible and focus on modifying or adding only what's needed.

### Main Changes
1. **Move Project Directory Setup to a New Layer 03**:
   - Remove the creation of `/home/developer/dev` (with `java`, `node`, `python` subdirectories) from Layer 01.
   - Create a new layer, `development-level03-project-stubs:v1.0.0`, to set up `/home/developer/dev` with minimal dummy projects.
   - Ensure `java`, `node`, and `python` directories are roots for multiple projects (e.g., `dummy_java_project01`, `dummy_java_project02`).
2. **Ensure Minimal Dummy Projects**:
   - Dummy projects in Layer 03 must be bare-bones (e.g., empty `pom.xml`, `package.json`, `requirements.txt`) with no dependencies.
   - Prohibit commands like `mvn install`, `npm install`, `pip install`, or `conda install` to keep the build fast (seconds, not minutes).
3. **Correct Python Installation in Layer 02**:
   - Replace the `apt-get` Python installation (`python3`, `python3-venv`, `python3-pip`) with Miniforge3 in `/home/developer/programs/miniforge3`, following https://github.com/99sono/install_guides/blob/main/conda_miniforge3/installation_steps.md.
   - Update `.bashrc` to activate Miniforge3’s Conda environment.
4. **Reuse Existing Files**:
   - Retain files like `00_common_env.sh`, `01_build_base_software_image/build.sh`, `config/sshd_config`, and `scripts/setup_ssh.sh` unless changes are needed.
   - Modify Layer 01 and Layer 02 Dockerfiles and add Layer 03 files.

### Detailed Instructions

1. **Project Structure**:
   - Update the existing structure:
     - `00_common_env.sh`: Update to include:
       ```
       IMAGE_NAME_SUFFIX_BASE_SOFTWARE="development-level01-basic-software"
       IMAGE_NAME_SUFFIX_DEV_ENVIRONMENTS="development-level02-dev-environments"
       IMAGE_NAME_SUFFIX_PROJECT_STUBS="development-level03-project-stubs"
       IMAGE_VERSION="1.0.0"
       TIMEZONE="Europe/Zurich"
       ```
     - `01_build_base_software_image/`: Retain `build.sh`, `config/`, `scripts/setup_ssh.sh`, `README.md`; update `Dockerfile` to remove workspace setup.
     - `02_install_dev_environments/`: Retain `build.sh`, `scripts/setup_nodejs.sh`, `README.md`; update `Dockerfile` for Miniforge3; update `scripts/setup_miniforge3.sh`.
     - Add `03_project_stubs/`:
       - `build.sh`: Build and tag the project stubs image.
       - `Dockerfile`: Set up minimal dummy projects.
       - `scripts/setup_projects.sh`: Create project directories and files.
       - `README.md`: Layer documentation.
     - Update top-level `README.md` to reflect the three-layer structure.

2. **Layer 01: Base Software Image**:
   - **Base Image**: `ubuntu:22.04`
   - **Dockerfile** (modify existing):
     - Keep installations: git, git-lfs, net-tools, curl, wget, tcpdump, htop, top, psmisc, vim, nano, tmux, zip, unzip, logrotate, cron, openssh-server, sudo.
     - Remove the creation of `/home/developer/dev` and related script (`setup_workspace.sh`).
     - Retain timezone setup (`Europe/Zurich`, configurable via `TIMEZONE`).
     - Retain user `developer` with home `/home/developer`, sudo privileges.
     - Retain SSH config: `PasswordAuthentication no`, `PermitRootLogin no`, `AllowUsers developer`.
     - Retain Git branch prompt in `.bashrc` (yellow branch in parentheses).
     - Clean up apt caches and temporary files.
   - **Scripts**:
     - Keep `setup_ssh.sh` for SSH key initialization.
   - **README.md**: Update to remove references to `/home/developer/dev`.

3. **Layer 02: Development Environments**:
   - **Base Image**: `development-level01-basic-software:1.0.0`
   - **Dockerfile** (modify existing):
     - Create `/home/developer/programs` for Miniforge3 and Node.js.
     - Keep OpenJDK 17 installation, set `JAVA_HOME` and `PATH`.
     - Replace Python installation:
       - Remove `apt-get install python3 python3-venv python3-pip`.
       - Install Miniforge3 in `/home/developer/programs/miniforge3` (follow https://github.com/99sono/install_guides/blob/main/conda_miniforge3/installation_steps.md):
         - Download `Miniforge3-Linux-x86_64.sh` using `wget`.
         - Install non-interactively: `bash Miniforge3-Linux-x86_64.sh -b -p /home/developer/programs/miniforge3`.
         - Initialize for Bash, update `.bashrc` to activate Conda.
     - Keep Node.js 20 installation in `/home/developer/programs/node` (via tarball), update `PATH`, ensure `npm` available.
     - Clean up temporary files and installer artifacts.
   - **Scripts**:
     - Update `setup_miniforge3.sh` to handle Miniforge3 installation and initialization.
     - Keep `setup_nodejs.sh` for Node.js installation.
   - **README.md**: Update to reflect Miniforge3 and no project setup.

4. **Layer 03: Project Stubs**:
   - **Base Image**: `development-level02-dev-environments:1.0.0`
   - **Dockerfile**:
     - Create `/home/developer/dev` with subdirectories `java`, `node`, `python`.
     - Each subdirectory is a root for multiple minimal dummy projects (build must take seconds):
       - `java`: Create `dummy_java_project01`, `dummy_java_project02`, each with:
         - Empty `src/main/java` and `src/test/java` directories.
         - A minimal `pom.xml` (only `groupId`, `artifactId`, `version`, no dependencies).
         - Do NOT run `mvn install` or download dependencies.
       - `node`: Create `dummy_node_project01`, `dummy_node_project02`, each with:
         - A minimal `package.json` (only `name`, `version`, no dependencies).
         - An empty `index.js`.
         - Do NOT run `npm install` or download dependencies.
       - `python`: Create `dummy_python_project01`, `dummy_python_project02`, each with:
         - An empty `main.py`.
         - An empty `requirements.txt` (no packages listed).
         - Do NOT create Conda environments or run `pip install`/`conda install`.
     - Set ownership to `developer`.
     - Ensure no network calls or dependency downloads.
   - **Scripts**:
     - `setup_projects.sh`: Create the above minimal project directories and files, avoiding dependency installations.
   - **README.md**: Explain the multi-project structure and minimal nature of dummy projects.

5. **Build Scripts**:
   - Reuse `01_build_base_software_image/build.sh` and `02_install_dev_environments/build.sh`.
   - Create `03_project_stubs/build.sh` to build and tag `development-level03-project-stubs:1.0.0`, with error handling and logging.

6. **Documentation**:
   - Update `01_build_base_software_image/README.md` and `02_install_dev_environments/README.md` to reflect changes.
   - Create `03_project_stubs/README.md` with instructions for building, running, and SSH access, plus details on the minimal multi-project structure.
   - Include volume mount examples for SSH keys and `/home/developer/dev`.
   - Update top-level `README.md` to describe the three-layer structure.

7. **Optimization**:
   - Keep Dockerfiles modular (separate `RUN` commands).
   - Minimize image size by cleaning up caches and temporary files.
   - Ensure Layer 03 build is extremely fast (seconds) by avoiding dependency downloads.
   - Reuse existing files to maintain consistency with the repository.

Please generate or modify the following files, reusing existing ones where unchanged:
- `00_common_env.sh` (update)
- `01_build_base_software_image/Dockerfile` (modify to remove workspace setup)
- `01_build_base_software_image/build.sh` (reuse)
- `01_build_base_software_image/config/sshd_config` (reuse)
- `01_build_base_software_image/scripts/setup_ssh.sh` (reuse)
- `01_build_base_software_image/README.md` (update)
- `02_install_dev_environments/Dockerfile` (modify for Miniforge3)
- `02_install_dev_environments/build.sh` (reuse)
- `02_install_dev_environments/scripts/setup_miniforge3.sh` (update)
- `02_install_dev_environments/scripts/setup_nodejs.sh` (reuse)
- `02_install_dev_environments/README.md` (update)
- `03_project_stubs/Dockerfile` (new)
- `03_project_stubs/build.sh` (new)
- `03_project_stubs/scripts/setup_projects.sh` (new)
- `03_project_stubs/README.md` (new)

Ensure security, maintainability, and minimal image size. For Layer 03, emphasize that dummy projects are bare-bones (empty files, no dependencies) to prevent slow builds. Suggest improvements if needed, especially for keeping project setups lightweight and reusing existing files.
Key Features of the Revised Prompt
Acknowledges Existing Work:
References the repository (https://github.com/99sono/docker_builds/tree/main/development_image) and existing files.
Requests reuse of unchanged files (e.g., build.sh, setup_ssh.sh, sshd_config).
Highlights Main Changes Upfront:
Lists the key modifications (new Layer 03, Miniforge3, minimal projects) before diving into details.
Makes it clear what needs to be changed versus kept.
Minimal Dummy Projects:
Specifies exact file structures (e.g., empty pom.xml, package.json, requirements.txt).
Prohibits dependency downloads and network calls in Layer 03.
Emphasizes a fast build (seconds, not minutes).
Corrects Python Installation:
Explicitly removes apt-get Python and replaces it with Miniforge3 in /home/developer/programs/miniforge3.
Includes .bashrc updates for Conda activation.
Modularity and Optimization:
Maintains separate RUN commands for caching.
Ensures cleanup steps to minimize image size.
Reuses existing scripts and configs to avoid redundancy.
Documentation:
Updates existing README.md files to reflect changes.
Adds a detailed README.md for Layer 03 explaining the minimal multi-project structure.
Example Modifications and New Files
To give you a sense of what Claude should produce, here’s a preview of key changes and new files:
Modified: 00_common_env.sh
bash
#!/bin/bash
# Global environment variables for the development Docker images

export IMAGE_NAME_SUFFIX_BASE_SOFTWARE="development-level01-basic-software"
export IMAGE_NAME_SUFFIX_DEV_ENVIRONMENTS="development-level02-dev-environments"
export IMAGE_NAME_SUFFIX_PROJECT_STUBS="development-level03-project-stubs"
export IMAGE_VERSION="1.0.0"
export TIMEZONE="Europe/Zurich"
Modified: 01_build_base_software_image/Dockerfile
Change: Remove the /home/developer/dev setup and setup_workspace.sh.
dockerfile
# Use Ubuntu 22.04 as the base image
FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TIMEZONE=Europe/Zurich

# Install essential packages and clean up
RUN apt-get update && apt-get install -y \
    git git-lfs \
    net-tools curl wget tcpdump \
    htop top psmisc \
    vim nano tmux zip unzip \
    logrotate cron \
    openssh-server \
    sudo \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set timezone
RUN ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime \
    && echo "$TIMEZONE" > /etc/timezone \
    && dpkg-reconfigure -f noninteractive tzdata

# Create developer user and set up home directory
RUN useradd -m -s /bin/bash developer \
    && echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/developer

# Copy configuration files and scripts
COPY config/sshd_config /etc/ssh/sshd_config
COPY scripts/setup_ssh.sh /usr/local/bin/setup_ssh.sh

# Set permissions for scripts
RUN chmod +x /usr/local/bin/setup_ssh.sh

# Configure Git branch prompt in .bashrc
RUN echo 'parse_git_branch() { git branch 2>/dev/null | grep "*" | sed "s/* //"; }' >> /home/developer/.bashrc \
    && echo 'PS1="\[\e[1;32m\]\u@\h:\[\e[1;34m\]\w\[\e[0;33m\](\$(parse_git_branch))\[\e[0m\]\$ "' >> /home/developer/.bashrc

# Set up SSH directory
RUN mkdir -p /home/developer/.ssh \
    && chown developer:developer /home/developer/.ssh \
    && chmod 700 /home/developer/.ssh

# Expose SSH port
EXPOSE 22

# Start SSH service
CMD ["/usr/sbin/sshd", "-D"]
Modified: 02_install_dev_environments/Dockerfile
Change: Replace Python apt-get installation with Miniforge3.
dockerfile
# Use the base software image
FROM development-level01-basic-software:1.0.0

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$JAVA_HOME/bin:$PATH

# Create programs directory
RUN mkdir -p /home/developer/programs \
    && chown developer:developer /home/developer/programs \
    && chmod 755 /home/developer/programs

# Install OpenJDK 17
RUN apt-get update && apt-get install -y \
    openjdk-17-jdk \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy setup scripts
COPY scripts/setup_miniforge3.sh /usr/local/bin/setup_miniforge3.sh
COPY scripts/setup_nodejs.sh /usr/local/bin/setup_nodejs.sh

# Set permissions
RUN chmod +x /usr/local/bin/setup_miniforge3.sh /usr/local/bin/setup_nodejs.sh

# Run setup scripts as developer user
USER developer
RUN /usr/local/bin/setup_miniforge3.sh \
    && /usr/local/bin/setup_nodejs.sh

# Switch back to root for SSH
USER root

# Expose SSH port (inherited from base)
EXPOSE 22

# Start SSH service
CMD ["/usr/sbin/sshd", "-D"]
Modified: 02_install_dev_environments/scripts/setup_miniforge3.sh
bash
#!/bin/bash
# Script to install Miniforge3 for Python

INSTALL_DIR="/home/developer/programs/miniforge3"
INSTALLER_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
INSTALLER_PATH="/tmp/Miniforge3-Linux-x86_64.sh"

# Download Miniforge3 installer
curl -L -o "$INSTALLER_PATH" "$INSTALLER_URL" || {
    echo "Error: Failed to download Miniforge3 installer"
    exit 1
}

# Install Miniforge3 non-interactively
bash "$INSTALLER_PATH" -b -p "$INSTALL_DIR" || {
    echo "Error: Miniforge3 installation failed"
    exit 1
}

# Initialize Miniforge3
"$INSTALL_DIR/bin/conda" init bash || {
    echo "Error: Failed to initialize Miniforge3"
    exit 1
}

# Clean up
rm -f "$INSTALLER_PATH"

# Update .bashrc to activate Miniforge3
echo "source $INSTALL_DIR/etc/profile.d/conda.sh" >> /home/developer/.bashrc
echo "conda activate base" >> /home/developer/.bashrc
New: 03_project_stubs/Dockerfile
dockerfile
# Use the dev environments image
FROM development-level02-dev-environments:1.0.0

# Copy setup script
COPY scripts/setup_projects.sh /usr/local/bin/setup_projects.sh

# Set permissions
RUN chmod +x /usr/local/bin/setup_projects.sh

# Run setup script
RUN /usr/local/bin/setup_projects.sh

# Expose SSH port (inherited from base)
EXPOSE 22

# Start SSH service
CMD ["/usr/sbin/sshd", "-D"]
New: 03_project_stubs/scripts/setup_projects.sh
bash
#!/bin/bash
# Script to set up minimal dummy projects

DEV_DIR="/home/developer/dev"
JAVA_DIR="$DEV_DIR/java"
NODE_DIR="$DEV_DIR/node"
PYTHON_DIR="$DEV_DIR/python"

# Create dev directories
mkdir -p "$JAVA_DIR" "$NODE_DIR" "$PYTHON_DIR"

# Java dummy projects
for i in 01 02; do
    PROJECT_DIR="$JAVA_DIR/dummy_java_project$i"
    mkdir -p "$PROJECT_DIR/src/main/java" "$PROJECT_DIR/src/test/java"
    cat <<EOF > "$PROJECT_DIR/pom.xml"
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>dummy-java-project$i</artifactId>
    <version>1.0.0</version>
</project>
EOF
done

# Node.js dummy projects
for i in 01 02; do
    PROJECT_DIR="$NODE_DIR/dummy_node_project$i"
    mkdir -p "$PROJECT_DIR"
    cat <<EOF > "$PROJECT_DIR/package.json"
{
    "name": "dummy-node-project$i",
    "version": "1.0.0"
}
EOF
    touch "$PROJECT_DIR/index.js"
done

# Python dummy projects
for i in 01 02; do
    PROJECT_DIR="$PYTHON_DIR/dummy_python_project$i"
    mkdir -p "$PROJECT_DIR"
    touch "$PROJECT_DIR/main.py" "$PROJECT_DIR/requirements.txt"
done

# Set permissions
chown -R developer:developer "$DEV_DIR"
chmod -R 755 "$DEV_DIR"
New: 03_project_stubs/build.sh
bash
#!/bin/bash
# Script to build the project stubs image

# Load environment variables
if [ -f ../00_common_env.sh ]; then
    source ../00_common_env.sh
else
    echo "Error: 00_common_env.sh not found!"
    exit 1
fi

# Validate variables
if [ -z "$IMAGE_NAME_SUFFIX_PROJECT_STUBS" ] || [ -z "$IMAGE_VERSION" ]; then
    echo "Error: IMAGE_NAME_SUFFIX_PROJECT_STUBS or IMAGE_VERSION not set!"
    exit 1
fi

# Build the Docker image
echo "Building Docker image: $IMAGE_NAME_SUFFIX_PROJECT_STUBS:$IMAGE_VERSION"
docker build -t "$IMAGE_NAME_SUFFIX_PROJECT_STUBS:$IMAGE_VERSION" . || {
    echo "Error: Docker build failed!"
    exit 1
}

echo "Build completed successfully!"
New: 03_project_stubs/README.md
markdown
# Development Level 03 Project Stubs Image

This Docker image (`development-level03-project-stubs:1.0.0`) builds on `development-level02-dev-environments:1.0.0`, adding a minimal project workspace with dummy projects.

## Prerequisites
- Docker installed.
- Built `development-level02-dev-environments:1.0.0`.

## Building the Image
1. Navigate to `03_project_stubs/`.
2. Run:
   ```bash
   ./build.sh
Running the Container
Start the container:
bash
docker run -d -p 2222:22 --name project-container development-level03-project-stubs:1.0.0
Copy your SSH public key:
bash
docker cp ~/.ssh/id_rsa.pub project-container:/home/developer/.ssh/authorized_keys
Connect via SSH:
bash
ssh -p 2222 developer@localhost
Workspace
Workspace at /home/developer/dev with subdirectories:
java: Contains dummy_java_project01, dummy_java_project02 (minimal pom.xml, empty src directories).
node: Contains dummy_node_project01, dummy_node_project02 (minimal package.json, empty index.js).
python: Contains dummy_python_project01, dummy_python_project02 (empty main.py, requirements.txt).
Each subdirectory is a root for multiple projects, with no dependencies to ensure fast builds.
Customization
Add SSH keys to /home/developer/.ssh/authorized_keys.
Extend dummy projects by adding dependencies or code as needed.

---

### **Notes on the Prompt**
1. **Reuses Existing Work**:
   - Explicitly references the repository and requests reuse of unchanged files (e.g., `build.sh`, `setup_ssh.sh`).
   - Only modifies necessary files (e.g., Dockerfiles, `setup_miniforge3.sh`) and adds Layer 03 files.
2. **Clear Change Focus**:
   - Lists the main changes upfront to guide Claude on what to prioritize.
   - Ensures the prompt is concise yet detailed for the modifications.
3. **Minimal Dummy Projects**:
   - Specifies exact file structures (e.g., empty `pom.xml`, `package.json`) and prohibits dependency downloads.
   - Emphasizes a fast build for Layer 03 (seconds, not minutes).
4. **Python with Miniforge3**:
   - Corrects the Python installation to use Miniforge3, removing `apt-get` Python.
   - Includes `.bashrc` updates for Conda activation.
5. **Documentation**:
   - Updates existing `README.md` files and adds a clear `README.md` for Layer 03.
   - Explains the multi-project structure and minimal nature of dummy projects.

---

### **Suggestions for Running the Prompt**
1. **Run in Claude 3.5 Sonnet**:
   - Paste the prompt and review the generated or modified files.
   - Ensure Claude reuses existing files (e.g., `setup_ssh.sh`, `build.sh`) and only modifies or adds what’s specified.
2. **Verify Minimal Projects**:
   - Check `03_project_stubs/scripts/setup_projects.sh` to confirm it creates only empty files and directories.
   - Ensure no `mvn`, `npm`, `pip`, or `conda` install commands are present.
3. **Test Build Speed**:
   - Build Layer 03 (`cd 03_project_stubs && ./build.sh`) and confirm it completes in seconds.
   - If slow, inspect for unintended dependency downloads.
4. **Compare with Repo**:
   - Align Claude’s output with your existing repository structure.
   - Update your repo with the modified and new files.

---

### **Next Steps**
1. **Test the Changes**:
   - Apply the modified and new files to your repository.
   - Build all three layers:
     - Layer 01: `cd 01_build_base_software_image && ./build.sh`
     - Layer 02: `cd 02_install_dev_environments && ./build.sh`
     - Layer 03: `cd 03_project_stubs && ./build.sh`
   - Verify the minimal project structures and build speed.
2. **Share Claude’s Output**:
   - If Claude suggests unexpected changes (e.g., adding dependencies), let me know, and I can refine the prompt.
   - Share any issues or additional tweaks needed.
3. **Other Changes**:
   - You mentioned further changes earlier. If you’re ready to discuss those, I can incorporate them into a new prompt or specification.
4. **Feedback**:
   - Let me know if this prompt meets your needs or if you want to adjust anything before running it.

Thanks for the clarification, and let me know how I can assist further! 🚀